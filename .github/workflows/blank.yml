name: CI Detect Fail

on:
  workflow_dispatch:

jobs:
  primer-job:
    runs-on: ubuntu-latest
    outputs:
      resultado: ${{ steps.set-output.outputs.status }}
    steps:
      - name: Ejecutar y capturar fallo
        id: test
        run: |
          echo "Ejecutando comando que falla..."
          exit 1
        continue-on-error: true  # ðŸ‘‰ no detiene el job1

      - name: Evaluar estado y guardar output
        id: set-output
        run: |
          if [[ "${{ steps.test.outcome }}" == "failure" ]]; then
            echo "status=FAIL" >> $GITHUB_OUTPUT
            echo "Fallo detectado. Se marcarÃ¡ como fallo al final."
            echo "fail=true" >> $GITHUB_ENV  # ðŸ‘ˆ usamos una variable de entorno
          else
            echo "status=OK" >> $GITHUB_OUTPUT
            echo "fail=false" >> $GITHUB_ENV
          fi

      - name: Marcar como fallido si fue necesario
        if: env.fail == 'true'
        run: |
          echo "Marcando el job como fallido intencionalmente..."
          exit 1  # ðŸ‘ˆ Esto marca el job como fallido al final

  segundo-job:
    runs-on: ubuntu-latest
    needs: primer-job
    if: needs.primer-job.outputs.resultado == 'FAIL'
    steps:
      - name: Ejecutar solo si primer-job fallÃ³
        run: echo "Se detectÃ³ un fallo en el primer job"
