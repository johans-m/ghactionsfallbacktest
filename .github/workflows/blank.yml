name: Conditional Workflow

on:
  push:
    branches:
      - main

jobs:
  main:
    name: Main Job
    runs-on: ubuntu-latest
    outputs:
      main_status: ${{ steps.set-output.outputs.status }}
    steps:
      - name: Simulated task
        id: run-main
        run: |
          echo "Running MAIN job..."
          # üëâ CAMBIA ESTE VALOR para simular √©xito (0) o fallo (1)
          exit 1

      - name: Capture exit code
        id: set-output
        run: |
          echo "status=${{ job.status == 'success' && '0' || '1' }}" >> "$GITHUB_OUTPUT"
        continue-on-error: true  # Nunca hacer fallar el job oficialmente

  fallback:
    name: Fallback Job
    needs: main
    if: ${{ needs.main.outputs.main_status != '0' }}
    runs-on: ubuntu-latest
    steps:
      - name: Fallback logic
        run: |
          echo "Running FALLBACK job..."
          # üëâ CAMBIA ESTE VALOR para simular √©xito (0) o fallo (1)
          exit 0

  finalize:
    name: Finalize Success
    # Se ejecuta si main fue exitoso, o si main fall√≥ y fallback lo resolvi√≥
    needs:
      - main
      - fallback
    if: |
      always() &&
      (
        needs.main.outputs.main_status == '0' ||
        (needs.main.outputs.main_status != '0' && success())
      )
    runs-on: ubuntu-latest
    steps:
      - name: Success
        run: echo "‚úÖ Workflow completed successfully"

  finalize_fail:
    name: Finalize Failure
    # Se ejecuta solo si tanto main como fallback fallaron
    needs:
      - main
      - fallback
    if: |
      always() &&
      needs.main.outputs.main_status != '0' &&
      failure()
    runs-on: ubuntu-latest
    steps:
      - name: Failure
        run: |
          echo "‚ùå Workflow failed completely"
          exit 1
